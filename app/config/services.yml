# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false
    admin.size:
            class: AppBundle\Admin\SizeAdmin
            arguments: [~, ProductBundle\Entity\Size, ~]
            tags:
                - { name: sonata.admin, manager_type: orm, label: Size, group: Product }
            public: true
    admin.color:
            class: AppBundle\Admin\ColorAdmin
            arguments: [~, ProductBundle\Entity\Color, ~]
            tags:
                - { name: sonata.admin, manager_type: orm, label: Color, group: Product }
            public: true
    admin.sizetype:
            class: AppBundle\Admin\SizeTypeAdmin
            arguments: [~, ProductBundle\Entity\SizeType, ~]
            tags:
                - { name: sonata.admin, manager_type: orm, label: Size Type, group: Product}
            public: true
    admin.option:
            class: AppBundle\Admin\OptionsAdmin
            arguments: [~, ProductBundle\Entity\Options, ~]
            tags:
                - { name: sonata.admin, manager_type: orm, label: Options, group: Product}
            public: true
    admin.product:
            class: AppBundle\Admin\ProductAdmin
            arguments: [~, ProductBundle\Entity\Product, ~]
            tags:
                - { name: sonata.admin, manager_type: orm, label: Product, group: Product}
            public: true
    admin.supplier:
            class: AppBundle\Admin\SupplierAdmin
            arguments: [~, SupplierBundle\Entity\Supplier, ~]
            tags:
                - { name: sonata.admin, manager_type: orm, label: Suppliers, group: Supplier}
            public: true
    admin.contract:
            class: AppBundle\Admin\ContractAdmin
            arguments: [~, SupplierBundle\Entity\Contract, ~]
            tags:
                - { name: sonata.admin, manager_type: orm, label: Contracts, group: Supplier}
            public: true
    supplier.command.source_import:
            class: SupplierBundle\Command\SourceImportCommand
            tags:
                - { name: console.command , command: supplier:import-feed}
    supplier.command.source_discover_attributes:
                class: SupplierBundle\Command\DiscoverAttributesCommand
                tags:
                    - { name: console.command , command: supplier:discover-attributes}
    supplier.command.create_product:
                class: SupplierBundle\Command\CreateProductCommand
                tags:
                    - { name: console.command , command: supplier:create-product}

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    AppBundle\:
        resource: '../../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/AppBundle/{Entity,Repository,Tests}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    FeedBundle\Controller\:
        resource: '../../src/FeedBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    # add more services, or override services that need manual wiring
    # AppBundle\Service\ExampleService:
    #     arguments:
    #         $someArgument: 'some_value'
    FeedBundle\Service\:
        resource: '../../src/FeedBundle/Service/'
        public: true
    SupplierBundle\Service\:
            resource: '../../src/SupplierBundle/Service/'
            arguments: ["@service_container"]
            public: true
            calls:
                - [setContainer, ["@service_container"]]
